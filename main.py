import asyncpg

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '6579809280:AAFnbholmlRVY3XWbapn0iRdtrlmjuhZYBE'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
admin_id = 223444075
pool = None


async def create_db_pool():
    return await asyncpg.create_pool(user='postgres', password='Efotod266', database='greys', host='127.0.0.1')


async def on_startup(dp):
    global pool
    pool = await create_db_pool()
    await bot.send_message(chat_id=admin_id, text="Bot has started\n/start")


async def get_username(user_id):
    chat = await bot.get_chat(user_id)
    return chat.full_name


async def add_points(user_id, chat_id, points_to_add):
    async with pool.acquire() as conn:
        await conn.execute('''
            UPDATE users
            SET points = points + $1
            WHERE user_id = $2 AND chat_id = $3
        ''', points_to_add, user_id, chat_id)


def main_menu_markup():
    markup = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal")
    btn2 = InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")
    btn3 = InlineKeyboardButton("üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", callback_data="socials")
    btn4 = InlineKeyboardButton("üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏", callback_data="location")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    return markup


def get_back_markup():
    markup = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
    markup.add(back_btn)
    return markup


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    message_id = message.message_id
    if pool is not None:
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO users (user_id, chat_id, points, visits)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id, chat_id) DO NOTHING
            ''', user_id, chat_id, 0, 0)
    else:
        print("Pool is not initialized")
    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id,
                           "–ü—Ä–∏–≤–µ—Ç! *–≠—Ç–æ Grey's Crewz*\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n\n_–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @greyscrewz_",
                           reply_markup=main_menu_markup(), parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda c: c.data == 'personal')
async def personal_cabinet(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    if pool is not None:
        async with pool.acquire() as conn:
            response = await conn.fetchrow("SELECT visits, points FROM users WHERE user_id = $1 AND chat_id = $2", user_id, chat_id)
            user = await get_username(user_id)
            visits = response['visits']
            points = response['points']

            if visits != 0:
                await bot.edit_message_text(f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, *{user}*!\n –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n–°–ª–µ–¥—É—é—â–∏–π —Ç–≤–æ–π –≤–∏–∑–∏—Ç –±—É–¥–µ—Ç —É–∂–µ *{visits}* –ü–æ —Å—á–µ—Ç—É, —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!",
                                            callback_query.from_user.id,
                                            callback_query.message.message_id,
                                            reply_markup=get_back_markup(),
                                            parse_mode=ParseMode.MARKDOWN)

            if visits == 0 and points == 0:
                await add_points(user_id, chat_id, 200)
                await bot.edit_message_text(
                    f"–ü—Ä–∏–≤–µ—Ç, *{user}*!\n–ú—ã –ø–æ–∫–∞ –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å, –Ω–æ –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç—ã —Å–∫–æ—Ä–æ –∑–∞–≥–ª—è–Ω–µ—à—å, –ø–æ—ç—Ç–æ–º—É –¥–∞—Ä–∏–º 200 –±–∞–ª–ª–æ–≤!\n–ë–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_back_markup(),
                    parse_mode=ParseMode.MARKDOWN)

            if visits == 0 and points != 0:
                await bot.edit_message_text(
                    f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, *{user}*!\n –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n–ü—Ä–∏—Ö–æ–¥–∏, —á—Ç–æ –±—ã –∏—Ö –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å!",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_back_markup(),
                    parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda c: c.data == 'book')
async def book_appointment(callback_query: types.CallbackQuery):
    await bot.edit_message_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=get_back_markup())


@dp.callback_query_handler(lambda c: c.data == 'socials')
async def social_media(callback_query: types.CallbackQuery):
    await bot.edit_message_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=get_back_markup())


@dp.callback_query_handler(lambda c: c.data == 'location')
async def find_us(callback_query: types.CallbackQuery):
    await bot.edit_message_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏.",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=get_back_markup())


@dp.callback_query_handler(lambda c: c.data == 'back')
async def go_back(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        "–ü—Ä–∏–≤–µ—Ç! *–≠—Ç–æ Grey's Crewz*\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n\n_–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @greyscrewz_",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=main_menu_markup(),
        parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
