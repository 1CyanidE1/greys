import asyncpg

import datetime
from datetime import timedelta
import calendar
import typing

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# from storage import MemoryStorage

pool = None
location_message_id = {}
date = {
    'month': {},
    'day': {},
}

ru = {
    'January': '—è–Ω–≤–∞—Ä—è',
    'February': '—Ñ–µ–≤—Ä–∞–ª—è',
    'March': '–º–∞—Ä—Ç–∞',
    'April': '–∞–ø—Ä–µ–ª—è',
    'May': '–º–∞—è',
    'June': '–∏—é–Ω—è',
    'July': '–∏—é–ª—è',
    'August': '–∞–≤–≥—É—Å—Ç–∞',
    'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
    'October': '–æ–∫—Ç—è–±—Ä—è',
    'November': '–Ω–æ—è–±—Ä—è',
    'December': '–¥–µ–∫–∞–±—Ä—è'
}

services = {
    "–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ": 90,
    "–ü–æ–∫—Ä—ã—Ç–∏–µ —Å –¥–∏–∑–∞–π–Ω–æ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–æ–≥—Ç–∏": 120,
    "–ü–æ–∫—Ä—ã—Ç–∏–µ —Å –¥–∏–∑–∞–π–Ω–æ–º –Ω–∞ –ª—é–±—É—é –¥–ª–∏–Ω—É –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ–≥—Ç–µ–π": 120,
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Å –ª—é–±—ã–º –¥–∏–∑–∞–π–Ω–æ–º (–¥–æ 6)": 180,
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è —Å –ª—é–±—ã–º –¥–∏–∑–∞–π–Ω–æ–º (–¥–æ 6)": 150,
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞ –¥–ª–∏–Ω–Ω—ã (–æ—Ç 6)": 240,
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –∫–æ—à–∞—á—å–∏—Ö –∫–æ–≥—Ç–µ–π (–¥–æ 6)": 240,
    "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –∫–æ—à–∞—á—å–∏—Ö –∫–æ–≥—Ç–µ–π —ç–∫—Å—Ç—Ä–∞ –¥–ª–∏–Ω—ã (–æ—Ç 6)": 270,
    "–î—Ä—É–≥–æ–µ": 180
}

services_list = list(services.keys())


async def create_db_pool():
    return await asyncpg.create_pool(user='postgres', password='Efotod266', database='greys', host='127.0.0.1')


async def on_startup(dp):
    global pool
    pool = await create_db_pool()
    await bot.send_message(chat_id=admin_id, text="Bot has started\n/start")


API_TOKEN = '6579809280:AAFnbholmlRVY3XWbapn0iRdtrlmjuhZYBE'

bot = Bot(token=API_TOKEN)
# storage = MemoryStorage()
dp = Dispatcher(bot)
admin_id = 223444075


async def update_user_booking(user_id, book_date, book_time):
    book_date_obj = datetime.datetime.strptime(book_date, "%Y-%m-%d").date()
    book_time_obj = datetime.datetime.strptime(book_time, "%H:%M").time()
    if pool is not None:
        async with pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET book_status = $1, book_date = $2, book_time = $3 WHERE user_id = $4
            ''', True, book_date_obj, book_time_obj, user_id)


async def get_booked_times(date):
    global pool
    async with pool.acquire() as connection:
        rows = await connection.fetch("SELECT book_time FROM users WHERE book_date = $1 AND book_status = true", date)
        booked_times = [row['book_time'] for row in rows]
        return booked_times


async def check_active_booking(user_id):
    if pool is not None:
        async with pool.acquire() as conn:
            result = await conn.fetchrow('SELECT * FROM users WHERE user_id = $1 AND book_status = True', user_id)

    return result is not None


async def get_booking_info(user_id):
    if pool is not None:
        async with pool.acquire() as conn:
            result = await conn.fetchrow('SELECT book_date, book_time FROM users WHERE user_id = $1 AND book_status = True',
                                     user_id)

    return result


async def cancel_booking(user_id):
    if pool is not None:
        async with pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET book_status = $1, book_date = $2, book_time = $3 WHERE user_id = $4
            ''', False, None, None, user_id)


def create_calendar(year=None, month=None):
    markup = InlineKeyboardMarkup()

    today = datetime.date.today()
    if year is None:
        year = today.year
    if month is None:
        month = today.month

    month_name = calendar.month_name[month]
    markup.add(InlineKeyboardButton(text=f"{month_name} {year}", callback_data="ignore"))

    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    row = []
    for day in days:
        row.append(InlineKeyboardButton(text=day, callback_data="ignore"))
    markup.row(*row)

    month_days = calendar.monthrange(year, month)[1]
    first_weekday = calendar.monthrange(year, month)[0]

    day_buttons = [InlineKeyboardButton(text=" ", callback_data="ignore") for _ in range(first_weekday)]

    for day in range(1, month_days + 1):

        if datetime.date(year, month, day) <= today:
            button_text = " "
            callback_data = "ignore"
        else:
            button_text = str(day)
            callback_data = f"day-{day}"

        day_buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))

        if len(day_buttons) % 7 == 0 or day == month_days:
            if day == month_days and len(day_buttons) < 7:
                day_buttons.extend(
                    [InlineKeyboardButton(text=" ", callback_data="ignore") for _ in range(7 - len(day_buttons))])
            markup.row(*day_buttons)
            day_buttons = []

    is_current_month = year == today.year and month == today.month
    is_next_month = year == today.year and month == today.month + 1

    prev_button = InlineKeyboardButton(text="‚¨ÖÔ∏è",
                                       callback_data="prev_month") if not is_current_month else InlineKeyboardButton(
        text=" ", callback_data="ignore")
    next_button = InlineKeyboardButton(text="‚û°Ô∏è",
                                       callback_data="next_month") if not is_next_month else InlineKeyboardButton(
        text=" ", callback_data="ignore")

    markup.add(prev_button, next_button)
    markup.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back"))

    return markup


# def create_time_slots_keyboard():
#     markup = InlineKeyboardMarkup()
#
#     times = [(hour, minute) for hour in range(11, 20) for minute in [0, 30] if not (hour == 19 and minute == 30)]
#     for i in range(0, len(times), 2):
#         if i + 1 < len(times):
#             button1 = InlineKeyboardButton(text=f"{times[i][0]}:{times[i][1]:02}",
#                                            callback_data=f"time-{times[i][0]}:{times[i][1]:02}")
#             button2 = InlineKeyboardButton(text=f"{times[i + 1][0]}:{times[i + 1][1]:02}",
#                                            callback_data=f"time-{times[i + 1][0]}:{times[i + 1][1]:02}")
#             markup.row(button1, button2)
#         else:
#             button = InlineKeyboardButton(text=f"{times[i][0]}:{times[i][1]:02}",
#                                           callback_data=f"time-{times[i][0]}:{times[i][1]:02}")
#             markup.add(button)
#
#     return markup


async def is_time_slot_available(user_id, time_slot, service):
    duration = services[service]
    end_time = (time_slot[0] * 60 + time_slot[1] + duration) // 60, (time_slot[0] * 60 + time_slot[1] + duration) % 60
    if user_id not in date['month']:
        date_object = datetime.date(year=datetime.datetime.now().year, month=datetime.datetime.now().month,
                                    day=int(date['day'][user_id]))
    else:
        date_object = datetime.date(year=datetime.datetime.now().year, month=int(date['month'][user_id]),
                                    day=int(date['day'][user_id]))

    booked_times = await get_booked_times(date_object)

    booked_time_slots = [(time.hour, time.minute) for time in booked_times]

    for hour, minute in [(h, m) for h in range(time_slot[0], end_time[0] + 1) for m in [0, 30]]:
        if (hour, minute) in booked_time_slots:
            return False
    return True


async def create_time_slots_keyboard(user_id, date, service):
    markup = InlineKeyboardMarkup(row_width=2)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    booked_times = await get_booked_times(date)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ booked_times –≤ —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫
    booked_time_slots = [tuple(map(int, time.split(":"))) for time in booked_times]

    times = [(h, m) for h in range(11, 19) for m in [0, 30]]

    for hour, minute in times:
        time_slot = (hour, minute)
        if time_slot not in booked_time_slots and await is_time_slot_available(user_id, time_slot, service):
            markup.add(InlineKeyboardButton(text=f"{hour}:{minute:02}", callback_data=f"time-{hour}:{minute}"))

    return markup


def create_service_keyboard():
    markup = InlineKeyboardMarkup()

    for index, service in enumerate(services):
        markup.add(InlineKeyboardButton(text=service, callback_data=f"service-{index}"))

    return markup


async def get_username(user_id):
    chat = await bot.get_chat(user_id)
    return chat.full_name


async def add_points(user_id, chat_id, points_to_add):
    async with pool.acquire() as conn:
        await conn.execute('''
            UPDATE users
            SET points = points + $1
            WHERE user_id = $2 AND chat_id = $3
        ''', points_to_add, user_id, chat_id)


def main_menu_markup():
    markup = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal")
    btn2 = InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")
    btn3 = InlineKeyboardButton("üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", callback_data="socials")
    btn4 = InlineKeyboardButton("üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏", callback_data="location")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    return markup


def get_back_markup():
    markup = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
    markup.add(back_btn)
    return markup


def social_markup():
    markup = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton("üì∏ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º", url="https://instagram.com/greyscrewz/")
    btn2 = InlineKeyboardButton("üìò –ö–∞–Ω–∞–ª —Ç–µ–ª–µ–≥—Ä–∞–º–º", url="https://t.me/greyscrew/")
    btn3 = InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
    markup.add(btn1, btn2)
    markup.add(btn3)
    return markup


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    message_id = message.message_id

    if pool is not None:
        async with pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO users (user_id, chat_id, points, visits)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id, chat_id) DO NOTHING
            ''', user_id, chat_id, 0, 0)
            response = await conn.fetchrow("SELECT visits, points FROM users WHERE user_id = $1 AND chat_id = $2",
                                           user_id, chat_id)
            visits = response['visits']
            points = response['points']

            if visits == 0 and points == 0:
                await add_points(user_id, chat_id, 200)
                user = await get_username(user_id)
                await bot.send_message(chat_id,
                                       f"–ü—Ä–∏–≤–µ—Ç, *{user}*! *–≠—Ç–æ Grey's Crewz*\n"
                                       f"–ú—ã –ø–æ–∫–∞ –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å, –Ω–æ –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç—ã —Å–∫–æ—Ä–æ –∑–∞–≥–ª—è–Ω–µ—à—å,"
                                       f" –ø–æ—ç—Ç–æ–º—É –¥–∞—Ä–∏–º 200 –±–∞–ª–ª–æ–≤!\n\n"
                                       f"_–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @greyscrewz_",
                                       reply_markup=main_menu_markup(), parse_mode=ParseMode.MARKDOWN)
                return
    else:
        print("Pool is not initialized")

    await bot.delete_message(chat_id, message_id)
    await bot.send_message(chat_id,
                           "–ü—Ä–∏–≤–µ—Ç! *–≠—Ç–æ Grey's Crewz*\n"
                           "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n\n"
                           "_–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @greyscrewz_",
                           reply_markup=main_menu_markup(), parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda c: c.data == 'personal')
async def personal_cabinet(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    booking_info = await get_booking_info(user_id)

    if pool is not None:
        async with pool.acquire() as conn:
            response = await conn.fetchrow("SELECT visits, points FROM users WHERE user_id = $1 AND chat_id = $2",
                                           user_id, chat_id)
            user = await get_username(user_id)
            visits = response['visits']
            points = response['points']

            markup = InlineKeyboardMarkup()
            btn1 = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
            back_btn = InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
            markup.add(btn1, back_btn)

            if visits != 0:

                if booking_info:
                    book_date = booking_info['book_date']
                    book_time = booking_info['book_time']

                    await bot.edit_message_text(
                        f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, *{user}*!\n"
                        f"–£ –í–∞—Å —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n\n"
                        f"–¢–∞–∫ –∂–µ, —É –í–∞—Å –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {book_date.strftime('%d')} {ru[book_date.strftime('%B')]} —á–∏—Å–ª–æ"
                        f" –≤ {book_time.strftime('%H:%M')} —á–∞—Å–æ–≤.\n"
                        f"–û—á–µ–Ω—å –∂–¥–µ–º!",
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=markup,
                        parse_mode=ParseMode.MARKDOWN)

                else:
                    await bot.edit_message_text(
                        f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, *{user}*!\n"
                        f"–£ –í–∞—Å —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, "
                        f"–Ω–æ –º—ã –í–∞—Å –æ—á–µ–Ω—å –∂–¥–µ–º!",
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=get_back_markup(),
                        parse_mode=ParseMode.MARKDOWN)

            if visits == 0 and points != 0:

                if booking_info:
                    book_date = booking_info['book_date']
                    book_time = booking_info['book_time']

                    await bot.edit_message_text(
                        f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, *{user}*!\n"
                        f"–£ –í–∞—Å —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n\n"
                        f"–¢–∞–∫ –∂–µ, —É –í–∞—Å –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {book_date.strftime('%d')} {ru[book_date.strftime('%B')]} —á–∏—Å–ª–æ"
                        f" –≤ {book_time.strftime('%H:%M')} —á–∞—Å–æ–≤.\n"
                        f"–û—á–µ–Ω—å –∂–¥–µ–º!",
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=markup,
                        parse_mode=ParseMode.MARKDOWN)

                else:
                    await bot.edit_message_text(
                        f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, *{user}*!\n"
                        f"–£ –í–∞—Å —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n"
                        f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, —á—Ç–æ –±—ã –∏—Ö –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å!",
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=get_back_markup(),
                        parse_mode=ParseMode.MARKDOWN)

            if visits == 0 and points == 200:

                if booking_info:
                    book_date = booking_info['book_date']
                    book_time = booking_info['book_time']

                    await bot.edit_message_text(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{user}*!\n"
                        f"–£ –í–∞—Å —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n\n"
                        f"–¢–∞–∫ –∂–µ, —É –í–∞—Å –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {book_date.strftime('%d')} {ru[book_date.strftime('%B')]} —á–∏—Å–ª–æ"
                        f" –≤ {book_time.strftime('%H:%M')} —á–∞—Å–æ–≤.\n"
                        f"–û—á–µ–Ω—å –∂–¥–µ–º!",
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=markup,
                        parse_mode=ParseMode.MARKDOWN)

                else:
                    await bot.edit_message_text(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{user}*!\n"
                        f"–£ –í–∞—Å —Å–µ–π—á–∞—Å *{points}* –±–∞–ª–ª–æ–≤.\n"
                        f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, —á—Ç–æ –±—ã –∏—Ö –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å!",
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=get_back_markup(),
                        parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda c: c.data == 'cancel_booking')
async def cancel_booking_query(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    booking_info = await get_booking_info(user_id)

    if booking_info:
        book_datetime = datetime.datetime.combine(booking_info['book_date'], booking_info['book_time'])

        time_difference = book_datetime - datetime.datetime.now()

        if time_difference < timedelta(days=1):
            await bot.edit_message_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞.",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_back_markup()
            )
            return

    markup = InlineKeyboardMarkup(row_width=2)

    yes_button = InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_cancel")
    no_button = InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="back")

    markup.add(yes_button, no_button)

    await bot.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=markup
    )


@dp.callback_query_handler(lambda c: c.data == 'confirm_cancel')
async def confirm_cancellation(callback_query: types.CallbackQuery):
    await cancel_booking(callback_query.from_user.id)
    await bot.edit_message_text(
        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=get_back_markup()
    )


@dp.callback_query_handler(lambda c: c.data == 'book')
async def book_appointment(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_active_booking(user_id):
        await bot.edit_message_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å!\n–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–µ—à—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
                                    callback_query.from_user.id,
                                    callback_query.message.message_id,
                                    reply_markup=get_back_markup())

    else:
        await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.",
                                    callback_query.from_user.id,
                                    callback_query.message.message_id,
                                    reply_markup=create_calendar())


@dp.callback_query_handler(lambda c: c.data == 'prev_month' or c.data == 'next_month')
async def process_month_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    current_data = await state.get_data()

    year = current_data.get('year', datetime.date.today().year)
    month = current_data.get('month', datetime.date.today().month)

    global date

    if callback_query.data == 'prev_month':
        selected_month = current_data.get('month', datetime.date.today().month)
        date['month'][callback_query.from_user.id] = selected_month
        if month == 0:  # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü - –¥–µ–∫–∞–±—Ä—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞
            month = 12
            year -= 1

    elif callback_query.data == 'next_month':
        selected_month = current_data.get('month', datetime.date.today().month) + 1
        date['month'][callback_query.from_user.id] = selected_month
        month += 1
        if month == 13:  # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü - —è–Ω–≤–∞—Ä—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
            month = 1
            year += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data({'year': year, 'month': month})

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    markup = create_calendar(year, month)
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)


# @dp.callback_query_handler(lambda c: c.data.startswith('day-'))
# async def process_day_selection(callback_query: types.CallbackQuery, state: FSMContext):
#     print(callback_query.data)
#     current_day = datetime.datetime.now().date()
#     selected_day = callback_query.data.split('-')[1]
#     user_id = callback_query.from_user.id
#
#     global date
#     date['day'][user_id] = selected_day
#
#     markup = create_time_slots_keyboard()
#     await bot.edit_message_text(chat_id=callback_query.from_user.id,
#                                 message_id=callback_query.message.message_id,
#                                 text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_day} —á–∏—Å–ª–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è:",
#                                 reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith('day-'))
async def process_day_selection(callback_query: types.CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.split('-')[1]
    user_id = callback_query.from_user.id

    global date
    date['day'][user_id] = selected_day

    markup = create_service_keyboard()
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                                reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith('service-'))
async def process_service_selection(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—Å–ª—É–≥–∏ –∏–∑ callback_data
    selected_service_index = int(callback_query.data.split('-')[1])
    selected_service_name = services_list[selected_service_index]

    await state.update_data(selected_service=selected_service_name)

    if selected_service_name == "–î—Ä—É–≥–æ–µ":
        await bot.send_message(chat_id=callback_query.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–ª–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    current_date = datetime.date.today()  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –¥–∞—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ä–µ—à–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    markup = await create_time_slots_keyboard(callback_query.from_user.id, current_date, selected_service_name)

    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: {selected_service_name}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å "
                                     f"–≤—Ä–µ–º—è:",
                                reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data.startswith('time-'))
async def process_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
    selected_time = callback_query.data.split('-')[1]
    user_id = callback_query.from_user.id

    global date

    selected_day = date['day'][user_id]
    if date['month']:
        selected_month = date['month'][user_id]

    else:
        current_data = await state.get_data()
        selected_month = selected_month = current_data.get('month', datetime.date.today().month)

    current_data = await state.get_data()
    year = current_data.get('year', datetime.date.today().year)
    month = current_data.get('month', datetime.date.today().month)
    book_date = f"{year}-{selected_month}-{selected_day}"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    await update_user_booking(callback_query.from_user.id, book_date, selected_time)

    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {selected_day}, –≤—Ä–µ–º—è {selected_time}. –°–ø–∞—Å–∏–±–æ!\n"
                                     f"–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, —Ç–∞–º –∂–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –µ–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.",
                                reply_markup=get_back_markup())


@dp.callback_query_handler(lambda c: c.data == 'socials')
async def social_media(callback_query: types.CallbackQuery):
    await bot.edit_message_text("–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏!",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=social_markup())


@dp.callback_query_handler(lambda c: c.data == 'location')
async def find_us(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    markup = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton("üì∏ –í–∏–¥–µ–æ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç –°–µ–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∏", url="https://instagram.com/greyscrewz/")
    btn2 = InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")
    markup.add(btn1)
    markup.add(btn2)
    await bot.edit_message_text("–ù–∞—à –∞–¥—Ä–µ—Å: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 2/6.\n"
                                "–ö–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞ - 12",
                                callback_query.from_user.id,
                                callback_query.message.message_id,
                                reply_markup=markup)

    sent_message = await bot.send_location(callback_query.from_user.id, latitude=59.92622, longitude=30.31827)
    location_message_id[user_id] = sent_message.message_id


@dp.callback_query_handler(lambda c: c.data == 'back')
async def go_back(callback_query: types.CallbackQuery):
    global location_message_id
    if location_message_id:
        await bot.delete_message(callback_query.from_user.id, location_message_id[callback_query.from_user.id])
        location_message_id = {}
    await bot.edit_message_text(
        "–ü—Ä–∏–≤–µ—Ç! *–≠—Ç–æ Grey's Crewz*\n"
        "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n\n"
        "_–í–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏? –ù–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @greyscrewz_",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=main_menu_markup(),
        parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
